import math
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

def get_CI(v, opt=False):
    if opt:
        ci = st.t.interval(0.95, len(v) - 1, loc=np.mean(v), scale=st.sem(v))
        arr = [0, 0]
        arr[0] = np.mean(v) - ci[0]
        arr[1] =ci[1] - np.mean(v)
        return arr
    return st.t.interval(0.95, len(v) - 1, loc=np.mean(v), scale=st.sem(v))

def plot_bar(vals, xlabel ,ylabel, xticklabels, title):
    colors = ["skyblue", "chartreuse", "gold"]
    N = 3
    ind = np.arange(N)  # the x locations for the groups
    ind = np.array([0, 2, 4])
    width = 0.35        # the width of the bars
    get_err = lambda x, y, z : ((x[0],y[0],z[0]), (x[1],y[1],z[1]))
    ci_0, ci_1, ci_2 = get_CI(vals[0], True), get_CI(vals[1], True), get_CI(vals[2], True)
    ci_3, ci_4, ci_5 = get_CI(vals[3], True), get_CI(vals[4], True), get_CI(vals[5], True)
    ci_6, ci_7, ci_8 = get_CI(vals[6], True), get_CI(vals[7], True), get_CI(vals[8], True)
    yerr_bar1 = get_err(ci_0, ci_1, ci_2)
    yerr_bar2 = get_err(ci_3, ci_4, ci_5)
    yerr_bar3 = get_err(ci_6, ci_7, ci_8)
    print(yerr_bar3)
    fig, ax = plt.subplots(figsize=(9, 7))
    time_bar1 = ax.bar(ind - width/2, (np.mean(vals[0]), np.mean(vals[1]), np.mean(vals[2])),
                       width, yerr=yerr_bar1,  color=colors[0], capsize=5, label='Poucos')
    time_bar2 = ax.bar(ind + width/2, (np.mean(vals[3]), np.mean(vals[4]), np.mean(vals[5])),
                       width, yerr=yerr_bar2, color=colors[1],capsize=5, label='Médio')
    time_bar3 = ax.bar(ind + 1.5*width, (np.mean(vals[6]), np.mean(vals[7]), np.mean(vals[8])),
                       width, yerr=yerr_bar3, color=colors[2],capsize=5, label='Muitos')
    ax.set_title(title, size=18)
    ax.set_xlabel(xlabel, size=16)
    ax.set_ylabel(ylabel, color='b', size=16)
    ax.tick_params('y', colors='b')
    ax.set_xticks(ind + width / 2)
    ax.set_xticklabels(xticklabels)
    plt.legend(shadow=True, fancybox=True, title="Quantidade de ciclistas")
    plt.show()
print("------------ Confidence intervals --------------")
# OBS: 'sb' stands for short bikers, 'sl' for short laps, etc.
# TIME ARRAYS
# short bikers
sb_sl = np.array([6.41, 5.87, 5.35, 5.27, 5.55, 5.54, 5.53, 5.78, 5.79, 5.94,
                 5.72, 5.88, 5.38, 5.82, 5.56, 5.83, 5.64, 5.80, 5.59, 5.73,
                 5.44, 5.35, 5.72, 5.58, 5.64, 5.66, 5.69, 5.34, 5.67, 5.66])



sb_ml = np.array([10.45, 10.10, 10.20, 9.82, 9.85, 9.60, 9.90, 9.98, 10.17,
                 9.74, 10.01, 9.76, 10.16, 9.66, 9.62, 9.75, 10.10, 10.08,
                 9.72, 10.22, 9.70, 10.32, 9.57, 9.78, 10.10, 9.93, 9.74,
                 10.19, 9.80, 9.89])
sb_ll = np.array([21.84, 21.62, 19.34, 21.59, 18.78, 20.82, 18.53, 20.86,
                 22.49, 23.87, 21.74, 23.39, 24.18, 24.17, 25.35, 19.78,
                 25.49, 23.52, 19.05, 19.03, 21.76, 19.29, 18.05, 18.98,
                 19.93, 21.55, 21.55, 20.04, 19.27, 19.20])

# med bikers
mb_sl = np.array([22.25, 23.28, 21.96, 21.82, 22.60, 24.14, 23.02, 22.66,
                 22.73, 21.16, 24.22, 22.73, 22.10, 22.97, 21.68, 23.20,
                 22.32, 21.87, 22.06, 22.95, 22.21, 22.15, 22.05, 22.62,
                 23.01, 22.72, 22.94, 22.26, 23.02, 21.76])
mb_ml = np.array([39.91, 39.38, 40.08, 39.54, 37.94, 42.94, 39.09, 44.77,
                 45.20, 45.90, 44.85, 44.90, 48.60, 41.09, 47.90, 45.26,
                 48.80, 60.77, 61.61, 60.39, 61.58, 61.24, 55.71, 63.49,
                 59.86, 51.89, 53.52, 53.04, 56.10, 51.64])
mb_ll = np.array([76.46, 75.92, 74.28, 73.66, 75.07, 74.37, 73.83, 76.65,
                 74.31, 75.87, 73.97, 75.12, 74.82, 75.38, 76.35, 76.14,
                 73.80, 75.34, 74.77, 81.13, 75.14, 75.30, 76.19, 80.49,
                 75.89, 74.67, 74.40, 77.38, 75.59, 74.88])

# long bikers
lb_sl = np.array([54.41, 56.32, 55.89, 52.90, 51.32, 53.67, 56.20, 51.61,
                 52.81, 65.24, 49.22, 47.78, 51.14, 49.95, 49.97, 51.62,
                 51.39, 50.49, 50.67, 50.67, 51.31, 51.86, 49.36, 50.99,
                 49.48, 48.96, 49.63, 49.94, 51.66, 49.97])
lb_ml = np.array([121.43, 110.99, 103.36, 118.99, 99.38, 104.51, 139.66,
                 132.74, 134.32, 117.22, 116.20, 137.39, 129.18, 114.79,
                 122.88, 116.80, 128.65, 118.53, 132.00, 109.62, 129.56,
                 96.17, 98.42, 94.96, 95.64, 95.50, 99.52, 99.18, 99.97, 116.86])
lb_ll = np.array([185.52, 189.21, 181.71, 182.42, 190.21, 185.29, 183.01,
                 188.69, 180.90, 184.58, 182.44, 184.41, 191.69, 185.71,
                 181.15, 184.28, 176.89, 185.68, 185.60, 185.82, 181.39,
                 179.15, 180.67, 180.47, 181.90, 180.06, 181.62, 186.66, 176.64, 185.52])

# -------------  MEMORY -----------
# short bikers
sb_sl_m = np.array([27837130, 34264858, 34647850, 27817354, 30097114, 25878290,
                    31516954, 29023258, 31620682, 25941754, 30713866, 24891986,
                    30849562, 25169354, 29809810, 28194954, 25942042, 30384002,
                    29802434, 27738954, 31578010, 29317402, 33054586, 30855658,
                    25000202, 27151642, 27224842, 28891690, 29172010, 31917578])

sb_ml_m = np.array([46175266, 54014530, 51147562, 56152378, 57615794, 48694786,
                    51740498, 46642242, 51655466, 56384290, 54501042, 52985506,
                    50527330, 54902530, 53515482, 48847122, 52400434, 51804370,
                    51281682, 64315954, 58120402, 58872954, 57855442, 51314242,
                    51809218, 49670586, 47483314, 53477842, 62887426, 54506962])

sb_ll_m = np.array([88131898, 111107314,  77239762, 87795194, 108217098,
                    91841914, 87929178, 104283490,  91471474, 99906482,
                    83452338, 92685618, 96429610, 86679962, 88672858,
                    93372874, 87943698, 93872778, 108687826,  93884098,
                    98874122, 94773138, 92448274, 90579234, 97913218,
                    94072626, 102175386,  104948722,  106556578,  106006562])
# med bikers
mb_sl_m = np.array([147612358, 151851342, 140086534, 143691198, 156101886,
                    156464486, 150939246, 155471990, 134800038, 143221158,
                    134992718, 160703030, 146655886, 141701990, 155366630,
                    157411278, 151203638, 139556446, 126511478, 145124158,
                    135999942, 145999982, 141221230, 164444622, 144010262,
                    134304518, 151146102, 140433830, 148713846, 145230182])

mb_ml_m = np.array([253429086, 263622950, 286586622, 275689718, 272014598,
                    282142446, 281480966, 270897030, 270179822, 275229086,
                    280286294, 279827558, 253128462, 278493518, 284946950,
                    286839206, 267420910, 285550350, 278776950, 266455902,
                    273894862, 260511286, 278563478, 303805078, 259965278,
                    259993662, 261302206, 298071790, 262693310, 271940950])

mb_ll_m = np.array([511083822, 486105574, 466876230, 468839070, 489359174,
                    470554150, 501877846, 488290958, 478840606, 465209310,
                    494018750, 472434302, 518309206, 476863142, 481947942,
                    504768918, 527558638, 487288118, 507539494, 505368654,
                    506748030, 521639246, 486324382, 482226542, 510565078,
                    506320902, 484908766, 504670262, 509438102, 530957686])

# long bikers
lb_sl_m = np.array([12704803424, 13036213820, 12592060084, 12967697472,
                    13003934760, 13006016592, 13407386384, 13090038824,
                    13029933136, 13405129052, 12905960080, 13043025324,
                    12991345840, 12987275088, 12693361944, 13042183056,
                    12980966584, 12974207724, 13365227384, 12932535324,
                    12975590956, 13014688428, 12618605984, 12677094532,
                    12970193360, 12692604360, 12912940356, 13521467088,
                    13084783956, 13491002212])


lb_ml_m = np.array([26791281520, 26848096236, 26022935300, 26414620868,
                    26372601872, 26267287332, 25494093528, 26751628956,
                    26308320448, 25557071020, 26367056236, 26350954180,
                    25937984448, 25567800932, 25969015792, 25935163144,
                    26376248500, 26031310860, 26299970524, 26272803768,
                    26309357400, 26747061412, 26006261292, 25972511388,
                    26251952892, 26239293616, 26809071992, 26356935752,
                    26370368000, 26305155488])

lb_ll_m = np.array([52481769716, 53019496064, 53570120496, 53417760332,
                    53077149516, 52220131504, 53178843548, 51760730280,
                    52327453976, 53381781396, 53401745408, 52837660500,
                    53068835092, 53105125992, 53375188304, 53028370948,
                    53446777084, 53581645960, 52486114580, 53068129916,
                    52924567612, 52571266880, 52018239460, 52564864580,
                    52416151612, 53086550644, 52926233856, 53464513524,
                    52981168196, 53531612208])

#print("TIME USAGE, Short biker | short_laps: ", get_CI(sb_sl))
# Time usage
plot_bar((sb_sl, sb_ml, sb_ll, mb_sl, mb_ml, mb_ll, lb_sl, lb_ml, lb_ll),
        "Quantidade de voltas", "Tempo (s)", ('Baixa', 'Média', 'Alta'),
         "Uso de tempo")

# Memory usage
plot_bar((sb_sl_m/1e6, sb_ml_m/1e6, sb_ll_m/1e6, mb_sl_m/1e6, mb_ml_m/1e6, mb_ll_m/1e6, lb_sl_m/1e6, lb_ml_m/1e6, lb_ll_m/1e6),
        "Quantidade de voltas", "Memória (NSEI)", ('Baixa', 'Média', 'Alta'),
         "Uso de memória")
print(np.mean(sb_sl_m))
print(np.mean(sb_ml_m))
print(np.mean(sb_ll_m))
print(np.mean(mb_sl_m))
print(np.mean(mb_ml_m))
print(np.mean(mb_ll_m))
print(np.mean(lb_sl_m))
print(np.mean(lb_ml_m))
print(np.mean(lb_ll_m))
